{
  "name": "phaser-input",
  "author": {
    "name": "OrangeGames"
  },
  "version": "1.2.4",
  "description": "Adds input boxes to Phaser like CanvasInput, but also works for WebGL and Mobile, made for Phaser only.",
  "contributors": [
    {
      "name": "Ale Bles",
      "email": "a.bles@orangegames.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:orange-games/phaser-input.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/orange-games/phaser-input/raw/master/LICENSE"
    }
  ],
  "devDependencies": {
    "grunt": "0.4.x",
    "grunt-banner": "^0.6.0",
    "grunt-contrib-clean": "0.6.0",
    "grunt-contrib-connect": "^0.11.2",
    "grunt-contrib-uglify": "^0.11.0",
    "grunt-contrib-watch": "^0.6.1",
    "grunt-typescript": "0.8.0",
    "phaser": "2.6.1",
    "phaser-nineslice": "^1.0.0",
    "typescript": "1.8.x"
  },
  "engines": {
    "node": "5.x.x"
  },
  "readme": "Phaser Input\n============\n\nSome description here about how awesome this Phaser Input library is, because it works on Canvas AND WebGL. Oh did I mention mobile to? no? Well it supports mobile..\n\nKey features:\n\n* Works on mobile and Desktop\n* Included TypeScript support\n* Also runs under WebGL renderer\n* Pure Phaser implementation\n* Easy configurable\n* Production hardened\n\n\nGetting Started\n---------------\nFirst you want to get a fresh copy of the plugin. You can get it from this repo or from npm, ain't that handy.\n```\nnpm install phaser-input --save-dev\n```\n\nNext up you'd want to add it to your list of js sources you load into your game\n```html\n<script src=\"node_modules/phaser-input/build/phaser-input.js\"></script>\n```\n\nAfter adding the script to the page you can activate it by enabling the plugin:\n```javascript\ngame.add.plugin(Fabrique.Plugins.InputField);\n```\n\nUsage\n-----\n### Adding a InputField\nThe simplest way of adding a input field is:\n```javascript\nvar input = game.add.inputField(10, 90);\n```\n\nOfcourse there are options available that can be used to style the input. They can be passes as an object as the third parameter.\n\n```javascript\nvar password = game.add.inputField(10, 90, {\n    font: '18px Arial',\n    fill: '#212121',\n    fontWeight: 'bold',\n    width: 150,\n    padding: 8,\n    borderWidth: 1,\n    borderColor: '#000',\n    borderRadius: 6,\n    placeHolder: 'Password',\n    type: Fabrique.InputType.password\n});\n```\n### Using zoom\nZooming is easy to enable on an input field, it can be passed to the InputField as a setting. But there are some caveats:\n\nFirst of all, it's only meant for mobile. Second; it modifies the scale and pivot of the world, and that might interfere with your resize.\n\nAlso, when the keyboard is shown, sometimes a resize event will be triggered.\n\nIdeally you use a custom resize event, check for the static property `Fabrique.Plugins.InputField.KeyboardOpen` and don't resize when it's set to true.\n\n### Using keyboard open/close signals\nCurrent version includes two event dispatchers that notify when a device keyboard is opened or closed.\n\nYou can add listeners which trigger events based on this feedback.\n\n```javascript\nFabrique.Plugins.InputField.onKeyboardClose.addOnce(function() {\n                    this.resizeBackgroundImage();\n                });\n```\n\n### Capture input events\nBy default, input event will not bubble up to other elements\nThis is controlled by an InputField property called `blockInput`.\nWhen set to false, the input event will trigger on the input element and move up to other elements listening for the event.\n\ne.g. An in-game sprite might be listening for keyboard events (W, A, S, D).\nIf set to false, typing in input field will not trigger keyboard events for the sprite.\nSo the sprite will not move when typing into input field.\n\n\n### Toggle Enter key\nInputField has a property (`focusOutOnEnter`) that controls whether the input field will lose focus on pressing Enter.\nIf set to true, pressing enter will end focus on the field (default is true).\n\n\n### Current Limitations\n - Updates are slow when typing fast (type slower you!!)\n - Zoom modifies the pivot and scale of the world, so it might interfere with some stuff\n\n## Properties\n - **x**: number (0 by default) The X-coordinate in the game\n - **y**: number (0 by default) The Y-coordinate in the game\n - **fill**: string (#fff by default) The color of the inputted text\n - **fillAlpha**: number (1 by default) Alpha of the textbox, 0 will hide the textbox and only show the text/placeholder/cursor\n - **width**: number (150 by default) The width of the text box (just like in the DOM, padding, borders add onto this width)\n - **height**: number (14 by default) The height of the text box (just like in the DOM, padding, borders add onto this height)\n - **padding**: number (0 by default) The padding in pixels around all 4 sides of the text input area.\n - **borderWidth**: number (1 by default) Size of the border\n - **borderColor**: string (#000 by default) Color of the border\n - **borderRadius**: number (0 by default) Create rounded corners by setting a border radius\n - **placeHolder**: string ('' by default) Text that will be shown before the user input's anything\n - **placeHolderColor**: string (#000 by default) The color of the placeholder text\n - **type**: InputType (text by default) Either text, password or numeric\n - **backgroundColor**: string (#fff  by default) The background color of the input box\n - **cursorColor**: string (#000 by default) The color of the blinking cursor\n - **font**: string (14px Arial by default) The font that is used for the input box, covers the input text, placeholder and cursor\n - **min**: string (none by default) The minimum number for the input field, only for number input fields\n - **max**: string (none by default) The maximum number for the number input field, or the maxLength for other input fields\n - **selectionColor**: string (rgba(179, 212, 253, 0.8) by default) The default color for the text selection highlight.\n - **zoom**: boolean (false by default) if we need to  zoom onto the input field (mobile only).\n\n### Browser Support\nTested on:\n - Desktop\n  * Chrome 48+\n  * FireFox 44+\n  * Safari 9+\n - Mobile\n  * Chrome 48+\n  * iOS 9+\n\nCredits\n-------\nphaser-input is inspired by [CanvasInput](https://github.com/goldfire/CanvasInput)\n\nDisclaimer\n----------\nWe at OrangeGames just love playing and creating awesome games. We aren't affiliated with Phaser.io. We just needed some awesome input boxes in our awesome HTML5 games. Feel free to use it for enhancing your own awesome games!\n\nPhaser Input is distributed under the MIT license. All 3rd party libraries and components are distributed under their\nrespective license terms.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/orange-games/phaser-input/issues"
  },
  "_id": "phaser-input@1.2.4",
  "dist": {
    "shasum": "90dfe8ae1b2e84b7feefdaa30b515ed9b3623e70"
  },
  "_from": "phaser-input@",
  "_resolved": "https://registry.npmjs.org/phaser-input/-/phaser-input-1.2.4.tgz"
}
